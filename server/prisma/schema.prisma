// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Store {
  store_id                  Int                @id @default(autoincrement())
  store_code                String             @unique
  store_name                String
  general_manager           String
  total_departments         Int
  total_sub_departments     Int
  total_products            Int
  total_products_quantity   Int
  total_products_in_transit Int
  Department                Department[]
  ReceivingReports          ReceivingReports[]
}

//model for departments
model Department {
  department_id             Int                @id @default(autoincrement())
  store_code                String
  department_code           String             @unique
  department_name           String             @unique
  total_sub_departments     Int                @default(0)
  total_products            Int
  total_products_quantity   Int
  total_products_in_transit Int                @default(0)
  stock_alert               Boolean
  direct_supervisor         String             @unique
  createdAt                 DateTime           @default(now())
  updatedAt                 DateTime           @updatedAt
  inventoryRequests         InventoryRequest[]
  store                     Store              @relation(fields: [store_code], references: [store_code], onDelete: Cascade)
  subDepartments            SubDepartment[]
  product                   Product[]
}

//model for subdepartments
model SubDepartment {
  sub_department_id         Int                @id @default(autoincrement())
  sub_department_code       String             @unique
  sub_department_name       String             @unique
  department_code           String
  department_name           String             @default("department")
  total_products            Int
  total_products_quantity   Int
  total_products_in_transit Int                @default(0)
  stock_alert               Boolean
  sub_department_manager    String
  createdAt                 DateTime           @default(now())
  updatedAt                 DateTime           @updatedAt
  inventoryRequests         InventoryRequest[]
  department                Department         @relation(fields: [department_code], references: [department_code], onDelete: Cascade)
  product                   Product[]
}

//model for products
model Product {
  product_id          Int           @id @default(autoincrement())
  product_name        String        @unique
  product_code        String        @unique
  price               Float
  total_quantity      Int           @default(0)
  cap                 Int
  product_stock_alert Boolean       @default(false)
  in_transit          Boolean       @default(false)
  sub_department_code String        @default("XXXXXX")
  department_code     String        @default("XXXXXX")
  total_sales         Int           @default(0)
  base_price          Int           @default(0)
  selling_price       Int           @default(0)
  manufacturer        String        @default("")
  brand               String        @default("")
  case_pack           Int           @default(0)
  pending_approval    Boolean       @default(true)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  subDepartment       SubDepartment @relation(fields: [sub_department_code], references: [sub_department_code], onDelete: Cascade)
  department          Department?   @relation(fields: [department_code], references: [department_code], onDelete: Cascade)
  Sales               Sales[]
}

//model for employee
model Employee {
  employee_id              Int                @id @default(autoincrement())
  employee_name            String             @default("")
  employee_email           String             @unique
  employee_designation     String             @default("")
  employee_role            String             @default("")
  employee_department_code String             @default("")
  employee_password        String
  isAdmin                  Boolean            @default(false)
  createdAt                DateTime           @default(now())
  updatedAt                DateTime           @updatedAt
  inventoryRequest         InventoryRequest[]
}

model InventoryRequest {
  request_id                  Int            @id @default(autoincrement())
  request_type                String         @default("")
  request_by_name             String
  request_by_employee_id      Int
  request_for_employee_id     Int            @default(7)
  request_by_email            String
  request                     String
  request_department_code     String
  request_sub_department_code String
  status                      String         @default("PENDING APPROVAL")
  product_code                String
  createdAt                   DateTime       @default(now())
  updatedAt                   DateTime       @updatedAt
  department                  Department     @relation(fields: [request_department_code], references: [department_code], onDelete: Cascade)
  subDepartment               SubDepartment? @relation(fields: [request_sub_department_code], references: [sub_department_code], onDelete: Cascade)
  employee                    Employee?      @relation(fields: [request_for_employee_id], references: [employee_id], onDelete: Cascade)
}

model Sales {
  sales_id     Int     @id @default(autoincrement())
  product_code String
  sales_amount Int     @default(0)
  sales_date   String  @default("")
  product      Product @relation(fields: [product_code], references: [product_code], onDelete: Cascade)
}

model ReceivingReports {
  report_id                        Int     @id @default(autoincrement())
  truck_number                     String
  trucking_company                 String
  received                         Boolean
  unloaded                         Boolean
  received_at                      String
  total_products_quantity_expected Int     @default(0)
  total_products_quantity_received Int     @default(0)
  store_code                       String
  store                            Store   @relation(fields: [store_code], references: [store_code], onDelete: Cascade)
}
